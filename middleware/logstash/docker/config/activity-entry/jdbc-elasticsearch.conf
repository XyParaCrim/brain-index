# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  jdbc {
    jdbc_connection_string => "${JDBC_CONNECT_STRING}"
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    jdbc_driver_library => "${LOGSTASH_HOME}/lib/mysql-connector-java/mysql-connector-java-5.1.48-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_paging_enabled => true
    jdbc_page_size => "50000"

    statement_filepath => "${LOGSTASH_CONFIG}/activity-entry/jdbc-input.sql"

    # statement: "select * from wm_activity_entry where wm_activity_entry.update_date >= :sql_last_value"

    # schedule => "2014/12/24 2000"

    schedule => "0 */5 * * * *"

    # 使用递增列的值
    #use_column_value => true

    # 递增字段的名称，这里使用 update_time 这一列，这列的类型是 timestamp
    #tracking_column => "update_date"

    # 递增字段的类型，numeric 表示数值类型, timestamp 表示时间戳类型
    #tracking_column_type => "timestamp"

    # 同步点文件，这个文件记录了上次的同步点，重启时会读取这个文件，这个文件可以手动修改
    last_run_metadata_path => "${LOGSTASH_LAST_RUN}/activity-entry"

    #clean_run => true
  }
}
filter {
  jdbc_static {
    loaders => [
      {
        id => "wm_object_category"
        query => "select category_id, object_id, object_type, domain_id  from wm_object_category"
        local_table => "category"
      },
      {
        id => "wm_object_tag"
        query => "select tag_id, object_id, object_type, domain_id  from wm_object_tag"
        local_table => "tag"
      },
      {
        id => "wm_blog"
        query => "select id, status, domain_id, perm_type from wm_blog"
        local_table => "blog"
      },
      {
        id => "wm_block"
        query => "select id, status, domain_id, perm_type from wm_block"
        local_table => "block"
      },
      {
        id => "wm_social_group"
        query => "select id, status, domain_id, perm_type from wm_social_group"
        local_table => "sgroup"
      },
      {
        id => "wm_project"
        query => "select id, status, domain_id, perm_type from wm_project"
        local_table => "project"
      },
      {
      	id => "wm_user_follow"
      	query => "select id, status, domain_id, user_id, object_id, object_type, IFNULL(acct_id, -9223372036854775808) as acct_id from wm_user_follow"
      	local_table => "follow"
      },
      {
      	id => "wm_user_favorite"
      	query => "select id, status, domain_id, user_id, object_id, object_type from wm_user_favorite"
      	local_table => "favorite"
      },
      {
      	id => "wm_user_likes"
      	query => "select id, status, domain_id, user_id, object_id, object_type from wm_user_likes"
      	local_table => "likes"
      },
      {
      	id => "wm_user_relation"
      	query => "select id, status, domain_id, user_id, IFNULL(acct_id, -9223372036854775808) as acct_id, relation_user_id, IFNULL(relation_acct_id, -9223372036854775808) as relation_acct_id from wm_user_relation"
      	local_table => "relation"
      }
    ]

    local_db_objects => [
      {
        name => "category"
        index_columns => ["category_id", "object_id", "object_type"]
        columns => [
          ["category_id", "bigint"],
          ["object_id", "varchar(50)"],
          ["object_type", "varchar(30)"],
          ["domain_id", "varchar(50)"]
        ]
      },
      {
        name => "tag"
        index_columns => ["tag_id", "object_id", "object_type"]
        columns => [
          ["tag_id", "bigint"],
          ["object_id", "varchar(50)"],
          ["object_type", "varchar(30)"],
          ["domain_id", "varchar(50)"]
        ]
      },
      {
        name => "blog"
        index_columns => ["id"]
        columns => [
          ["id", "bigint"],
          ["status", "varchar(10)"],
          ["domain_id", "varchar(50)"],
          ["perm_type", "varchar(30)"]
        ]
      },
      {
      	name => "block"
        index_columns => ["id"]
        columns => [
          ["id", "bigint"],
          ["status", "varchar(10)"],
          ["domain_id", "varchar(50)"],
          ["perm_type", "varchar(30)"]
        ]
      },
      {
      	name => "sgroup"
        index_columns => ["id"]
        columns => [
          ["id", "bigint"],
          ["status", "varchar(10)"],
          ["domain_id", "varchar(50)"],
          ["perm_type", "varchar(30)"]
        ]
      },
      {
      	name => "project"
        index_columns => ["id"]
        columns => [
          ["id", "bigint"],
          ["status", "varchar(10)"],
          ["domain_id", "varchar(50)"],
          ["perm_type", "varchar(30)"]
        ]
      },
      {
      	name => "follow"
      	index_columns => ["id"]
      	columns => [
      		["id", "bigint"],
      		["status", "varchar(10)"],
      		["domain_id", "varchar(50)"],
      		["user_id", "bigint"],
      		["object_id", "varchar(50)"],
      		["object_type", "varchar(30)"],
          ["acct_id", "bigint"]
      	]
      },
      {
      	name => "favorite"
      	index_columns => ["id"]
      	columns => [
      		["id", "bigint"],
      		["status", "varchar(10)"],
      		["domain_id", "varchar(50)"],
      		["user_id", "bigint"],
      		["object_id", "varchar(50)"],
      		["object_type", "varchar(30)"]
      	]
      },
      {
      	name => "likes"
      	index_columns => ["id"]
      	columns => [
      		["id", "bigint"],
      		["status", "varchar(10)"],
      		["domain_id", "varchar(50)"],
      		["user_id", "bigint"],
      		["object_id", "varchar(50)"],
      		["object_type", "varchar(30)"]
      	]
      },
      {
      	name => "relation"
      	index_columns => ["id"]
      	columns => [
      		["id", "bigint"],
          ["status", "varchar(10)"],
      		["domain_id", "varchar(50)"],
          ["user_id", "bigint"],
          ["acct_id", "bigint"],
      		["relation_user_id", "bigint"],
      		["relation_acct_id", "bigint"]
      	]
      }
    ]

    local_lookups => [
      {
        id => "local-category"
        query => "select category.category_id from category where category.object_id = :object_id and category.object_type = :object_type and category.domain_id = :domain_id"
        parameters => {
          object_id => "[object_id]"
          object_type => "[object_type]"
          domain_id => "[domain_id]"
        }
        target => "category"
      },
      {
        id => "local-tag"
        query => "select tag.tag_id from tag where tag.object_id = :object_id and tag.object_type = :object_type and tag.domain_id = :domain_id"
        parameters => {
          object_id => "[object_id]"
          object_type => "[object_type]"
          domain_id => "[domain_id]"
        }
        target => "tag"
      },
      {
        id => "local-blog"
        query => "select * from blog where cast(blog.id as char(50)) = :container_id and 'blog' = :container_type"
        parameters => {
          container_id => "[container_id]"
          container_type => "[container_type]"
        }
        target => "blog_object"
      },
      {
      	id => "local-block"
        query => "select * from block where cast(block.id as char(50)) = :container_id and 'block' = :container_type"
        parameters => {
          container_id => "[container_id]"
          container_type => "[container_type]"
        }
        target => "block_object"
      },
      {
      	id => "local-sgroup"
        query => "select * from sgroup where cast(sgroup.id as char(50)) = :container_id and 'sgroup' = :container_type"
        parameters => {
          container_id => "[container_id]"
          container_type => "[container_type]"
        }
        target => "sgroup_object"
      },
      {
      	id => "local-project"
        query => "select * from project where cast(project.id as char(50)) = :container_id and 'sgroup' = :container_type"
        parameters => {
          container_id => "[container_id]"
          container_type => "[container_type]"
        }
        target => "project_object"
      },
      {
      	id => "local-object-follow"
      	query => "select * from follow where follow.object_id = :object_id and follow.object_type = :object_type"
      	parameters => {
          object_id => "[object_id]"
          object_type => "[object_type]"
        }
        target => "follow_object"
      },
      {
      	id => "local-container-follow"
      	query => "select * from follow where cast(follow.object_id as char(50)) = :container_id and follow.object_type = 'mainPage' and 'mainPage' = :container_type"
      	parameters => {
          container_id => "[container_id]"
          container_type => "[container_type]"
        }
        target => "follow_container"
      },
      {
      	id => "local-object-favorite"
      	query => "select * from favorite where favorite.object_id = :object_id and favorite.object_type = :object_type"
      	parameters => {
          object_id => "[object_id]"
          object_type => "[object_type]"
        }
        target => "favorite_object"
      },
      {
      	id => "local-object-likes"
      	query => "select * from likes where likes.object_id = :object_id and likes.object_type = :object_type"
      	parameters => {
          object_id => "[object_id]"
          object_type => "[object_type]"
        }
        target => "likes_object"
      },
      {
      	id => "local-object-relation"
      	query => "select * from relation where relation.relation_user_id = :user_id and 'userMainPage' = :container_type"
      	parameters => {
      	  user_id => "[user_id]"
          container_type => "[container_type]"
      	}
      	target => "relation_user"
      }
    ]

    loader_schedule => "0 * * * *"

    # jdbc connect message
    jdbc_connection_string => "${JDBC_CONNECT_STRING}"
    jdbc_user => "${JDBC_USER}"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_driver_library => "${LOGSTASH_HOME}/lib/mysql-connector-java/mysql-connector-java-5.1.48-bin.jar"
    jdbc_password => "${JDBC_PASSWORD}"

    staging_directory => "${LOGSTASH_HOME}/data/tmp/logstash/jdbc_static/import_data"
  }

  mutate {
    add_field => {
      "[@metadata][mode]" => "${LOGSTASH_RUN_MODE:debug}"
      "[@metadata][index]" => "activity-entry"
      "[@metadata][type]" => "social"
    }
  }
}
output {
  if [@metadata][mode] == "debug" {
    stdout { }
  }

  if [@metadata][mode] == "prod" {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOST}"
      index => "mysql-%{[@metadata][type]}-%{[@metadata][index]}"
      document_id => "%{id}"
      pool_max => 100
      pool_max_per_route => 10
      template => "${LOGSTASH_CONFIG}/activity-entry/elasticsearch-template.json"
      template_name => "mysql-social-activity-entry"
      template_overwrite => true
    }
  }
}

